import React, { useState, useEffect, useCallback, useMemo } from 'react';

import { useNavigation } from '@react-navigation/native';
import Icon from '@react-native-vector-icons/lucide';
import { useThemeColors } from '../../services/Theme';
import { useTranslate } from '../../services/Translate';
import DataManager from '../../services/DataManager';
import ApiManager from '../../services/ApiManager';
import TribesHeader from '../../components/Tribes/Header';
import TribeInfo from '../../components/Tribes/Info';
import Header from '../../components/General/Header';
import NotificationBadge from '../../components/General/NotificationBadge';
import NotificationsModal from '../../components/Learn/NotificationsModal';

export default function TribeScreen({ sourceId, timestamp }) {
	const colors = useThemeColors();
	const { translate } = useTranslate();
	const navigation = useNavigation();
	const [userTribe, setUserTribe] = useState(null);
	const [allTribes, setAllTribes] = useState([]);
	const [isInTribe, setIsInTribe] = useState(false);
	const [selectedTribe, setSelectedTribe] = useState(null);
	const [tribeMembers, setTribeMembers] = useState([]);
	const [loadingMembers, setLoadingMembers] = useState(false);
	const [joiningTribe, setJoiningTribe] = useState(false);
	const [memberAnimations, setMemberAnimations] = useState([]);
	const [notificationsOpen, setNotificationsOpen] = useState(false);
	const [unreadNotificationsCount, setUnreadNotificationsCount] = useState(0);

	useEffect(() => {
		// Get user's current tribe
		const currentTribe = DataManager.getUserTribe();
		setUserTribe(currentTribe);
		
		// Check if user is in a tribe
		const inTribe = DataManager.isInTribe();
		setIsInTribe(inTribe);
		
		// Get ALL tribes (both user's tribe and available tribes)
		const tribes = DataManager.getTribes();
		setAllTribes(tribes);
		
		// Set initial selected tribe (user's tribe if they have one, otherwise first available)
		let initialTribe = null;
		if (inTribe && currentTribe) {
			initialTribe = currentTribe;
		} else if (tribes.length > 0) {
			initialTribe = tribes[0];
		}
		
		if (initialTribe) {
			setSelectedTribe(initialTribe);
			// Fetch members for the initial selected tribe
			fetchTribeMembers(initialTribe.id);
		}
		
	}, []);

	// Separate useEffect for DataManager subscriptions (notifications count)
	useEffect(() => {
		const updateNotificationsData = () => {
			const unreadCount = DataManager.getUnreadNotificationsCount();
			setUnreadNotificationsCount(unreadCount);
		};

		// Initial load
		updateNotificationsData();

		// Subscribe to DataManager changes
		const unsubscribe = DataManager.subscribe(updateNotificationsData);

		// Cleanup subscription
		return unsubscribe;
	}, []);

	const handleSelect = (tribe) => {
		// Update selected tribe when user selects from header
		setSelectedTribe(tribe);
		//console.log('TribeScreen: Selected tribe =', tribe);
		
		// Fetch members for the selected tribe
		fetchTribeMembers(tribe.id);
	});

	const fetchTribeMembers = async (tribeId) => {
		if (!tribeId) return;
		
		try {
			// Clear previous tribe members and animations immediately
			setTribeMembers([]);
			setMemberAnimations([]);
			setLoadingMembers(true);
			
			const response = await ApiManager.getTribeMembers(tribeId);
			
			// Transform API response to format expected by UserList component
			const members = response.members || response.users || response || [];
			
			// Sort members alphabetically by name
			const sortedMembers = members.sort((a, b) => {
				const nameA = (a.name || a.firstName || '').toLowerCase();
				const nameB = (b.name || b.firstName || '').toLowerCase();
				return nameA.localeCompare(nameB);
			});
			
			//console.log('TribeScreen: Fetched members for tribe', tribeId, ':', sortedMembers);
			
			// Create animation values for each member
			const animations = sortedMembers.map(() => ({
				translateY: new Animated.Value(30),
				opacity: new Animated.Value(0)
			}));
			
			setTribeMembers(sortedMembers);
			setMemberAnimations(animations);
			
			// Animate members in sequence
			setTimeout(() => {
				animations.forEach((anim, index) => {
					setTimeout(() => {
						Animated.parallel([
							Animated.timing(anim.translateY, {
								toValue: 0,
								duration: 400,
								useNativeDriver: true,
							}),
							Animated.timing(anim.opacity, {
								toValue: 1,
								duration: 400,
								useNativeDriver: true,
							})
						]).start();
					}, index * 100); // 100ms delay between each member
				};
			}, 50); // Small delay before starting animations
			
		} catch (error) {
			console.error('Failed to fetch tribe members:', error);
			setTribeMembers([]); // Clear members on error
			setMemberAnimations([]);
		} finally {
			setLoadingMembers(false);
		}
	};

	const handleJoinTribe = async () => {
		if (!selectedTribe || joiningTribe) return;

		try {
			setJoiningTribe(true);
			//console.log('TribeScreen: Joining tribe', selectedTribe.id);
			
			const response = await ApiManager.joinTribe(selectedTribe.id);
			//console.log('TribeScreen: Join response', response);
			
			// Update DataManager with new tribe membership
			DataManager.updateUserTribeMembership(selectedTribe.id, true);
			
			// Update local state
			setUserTribe(selectedTribe);
			setIsInTribe(true);
			
			// Refresh the member list to include the current user
			await fetchTribeMembers(selectedTribe.id);
			
		} catch (error) {
			//console.error('Failed to join tribe:', error);
			// You could show an error message to the user here
		} finally {
			setJoiningTribe(false);
		}
	};

	const handleLeaveTribe = async () => {
		if (!selectedTribe || joiningTribe) return;

		try {
			setJoiningTribe(true);
			//console.log('TribeScreen: Leaving tribe', selectedTribe.id);
			
			const response = await ApiManager.leaveTribe();
			//console.log('TribeScreen: Leave response', response);
			
			// Update DataManager with removed tribe membership
			DataManager.updateUserTribeMembership(selectedTribe.id, false);
			
			// Update local state
			setUserTribe(null);
			setIsInTribe(false);
			
			// Refresh the member list to remove the current user
			await fetchTribeMembers(selectedTribe.id);
			
		} catch (error) {
			console.error('Failed to leave tribe:', error);
		} finally {
			setJoiningTribe(false);
		}
	};

	// Custom animated member list component
	const AnimatedMemberList = ({ members, animations, currentUserId }) => {
		const colors = useThemeColors();

		const ranked = useMemo(() => {
			const sorted = [...members].sort((a, b) => (b.stars || 0) - (a.stars || 0));
			let lastStars = null;
			let lastRank = 0;
			let itemsProcessed = 0;
			return sorted.map((u) => {
				itemsProcessed += 1;
				const s = u.stars || 0;
				let rank;
				if (lastStars === null) {
					rank = 1;
				} else if (s === lastStars) {
					rank = lastRank;
				} else {
					rank = itemsProcessed;
				}
				lastStars = s;
				lastRank = rank;
				return { ...u, rank };
			};
		}, [members]);

		const renderMember = useCallback(({ item, index }) => {
			const isSelf = item.id === currentUserId;
			const topMedal = item.rank <= 3;
			const medalIcon = item.rank === 1 ? 'crown' : item.rank === 2 ? 'award' : 'award';
			const medalColor = item.rank === 1 ? colors.accent : item.rank === 2 ? colors.primary : colors.primary;
			const animation = animations[index];

			if (!animation) return null;

			return (
				<Animated.View
					style={[
						memberListStyles.row,
						{ 
							backgroundColor: isSelf ? colors.accent + '22' : colors.text + '08',
							borderColor: colors.text + '15',
							transform: [{ translateY: animation.translateY }],
							opacity: animation.opacity
						}
					]}
				>
					<div style={memberListStyles.rankCol}>
						{topMedal ? (
							<Icon name={medalIcon} size={22} color={medalColor} />
						) : (
							<span style={{...memberListStyles.rankText, ...{ color: colors.text + 'AA' }}}>{item.rank}</span>
						)}
					</div>
					<div style={{...memberListStyles.avatar, ...{ borderColor: colors.primary + '66' }}}> 
						{item.avatarIcon ? (
							<Icon name={item.avatarIcon} size={20} color={colors.primary} />
						) : (
							<span style={{...memberListStyles.avatarLetter, ...{ color: colors.primary }}}>
								{(item.name || '?').charAt(0).toUpperCase()}
							</span>
						)}
					</div>
					<div style={memberListStyles.mainCol}>
						<span style={{...memberListStyles.name, ...{ color: colors.text }}} numberOfLines={1}>
							{item.name}
						</span>
					</div>
				</Animated.View>
			);
		}, [colors, currentUserId, animations]);

		if (ranked.length === 0) {
			return (
				<div style={{...memberListStyles.emptyWrapper, ...{ borderColor: colors.text + '22'}}> 
					<span style={{ color: colors.text + '99', fontSize: 14 }}>
						{loadingMembers ? "" : "Sem membros nesta tribo"}
					</span>
				</div>
			);
		}

		return (
			<div 				data={ranked}
				keyExtractor={(item, idx) => `user-${item.id || idx}-${item.email || ''}-${idx}`}
				renderItem={renderMember}
				style={memberListStyles.list}
				contentContainerStyle={memberListStyles.contentContainer}
				showsVerticalScrollIndicator={false}
			/>
		);
	};

	return (
		<div style={{...styles.container, ...{ backgroundColor: colors.background }}}>      
			<Header
				title={translate('titles.tribes')}
				right={(
					<div style={{ position: 'relative' }}>
						<button 							
							aria-label={translate('options.notification')}
							onClick={() => setNotificationsOpen(true)}
							hitSlop={{ top: 8, bottom: 8, left: 8, right: 8 }}
							style={{ paddingHorizontal: 4 }}
						>
							<Icon name="bell" size={22} color={colors.text} />
						</button>
						<NotificationBadge count={unreadNotificationsCount} />
					</div>
				)}
				extraRight={(
					<button 						
						aria-label={translate('settings.settings')}
						onClick={() => navigation.navigate('Settings')}
						hitSlop={{ top: 8, bottom: 8, left: 8, right: 8 }}
						style={{ paddingHorizontal: 4 }}
					>
						<Icon name="settings" size={22} color={colors.text} />
					</button>
				)}
			/>
			<TribesHeader 
				onSelect={handleSelect} 
				allTribes={allTribes}
				userTribe={userTribe}
				isInTribe={isInTribe}
			/>
			<TribeInfo 
				name={selectedTribe?.name}
				description={selectedTribe?.description}
				members={tribeMembers.length}
				joined={isInTribe && selectedTribe && userTribe && selectedTribe.id === userTribe.id}
				accentColor={selectedTribe?.color}
				iconColor={selectedTribe?.iconColor}
				icon={selectedTribe?.icon}
				tribeIconName="users" // fallback since API uses SVG icons
				onJoin={handleJoinTribe}
				onLeave={handleLeaveTribe}
				disabledJoin={joiningTribe || (isInTribe && selectedTribe && userTribe && selectedTribe.id !== userTribe.id)}
			/>
			<AnimatedMemberList
				members={tribeMembers}
				animations={memberAnimations}
				currentUserId={DataManager.getUser()?.id}
			/>
			<NotificationsModal visible={notificationsOpen} onClose={() => setNotificationsOpen(false)} />
		</div>
	);
}

const styles = {
	container: { flex: 1 },
};

const memberListStyles = StyleSheet.create({
	list: {
		flexGrow: 0,
	},
	contentContainer: {
		paddingHorizontal: 8,
		paddingBottom: 24,
	},
	row: {
		flexDirection: 'row',
		alignItems: 'center',
		paddingVertical: 10,
		paddingHorizontal: 10,
		borderWidth: 1,
		borderRadius: 14,
		marginTop: 10,
	},
	rankCol: {
		width: 34,
		alignItems: 'center',
	},
	rankText: {
		fontSize: 16,
		fontWeight: '800',
	},
	avatar: {
		width: 40,
		height: 40,
		borderRadius: 12,
		borderWidth: 2,
		alignItems: 'center',
		justifyContent: 'center',
		marginRight: 12,
	},
	avatarLetter: {
		fontSize: 18,
		fontWeight: '700',
	},
	mainCol: {
		flex: 1,
		justifyContent: 'center',
		marginRight: 10,
	},
	name: {
		fontSize: 15,
		fontWeight: '700',
	},
	emptyWrapper: {
		marginTop: 16,
		marginHorizontal: 16,
		borderWidth: 1,
		borderRadius: 16,
		padding: 24,
		alignItems: 'center',
	},
};

